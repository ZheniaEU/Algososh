describe("list", () => {

   const defaultColor = ["border-color", "rgb(0, 50, 255)"]
   const changingColor = ["border-color", "rgb(210, 82, 225)"]
   const modifiedColor = ["border-color", "rgb(127, 224, 81)"]

   const circle = "[data-testid=\"circle\"]"
   const head = "[data-testid=\"head\"]"
   const tail = "[data-testid=\"tail\"]"
   const inputValue = "[data-testid=\"input-value\"]"
   const inputIndex = "[data-testid=\"input-index\"]"
   const headAdd = "[data-testid=\"list add head\"]"
   const tailAdd = "[data-testid=\"list add tail\"]"
   const headDelete = "[data-testid=\"list del head\"]"
   const tailDelete = "[data-testid=\"list del tail\"]"
   const indexAdd = "[data-testid=\"list add index\"]"
   const indexDelete = "[data-testid=\"list del index\"]"

   const arr = []

   before("open page", () => {
      cy.visit("/list")
      cy.get(circle).each((e, i) => {
         i & 1 && arr.push(e.text())
      })
   })

   it("empty inputs value and disabled buttons", () => {
      cy.get(inputValue).should("be.empty")
      cy.get(inputIndex).should("be.empty")
      cy.get(headAdd).should("be.disabled")
      cy.get(tailAdd).should("be.disabled")
      cy.get(headDelete).should("be.enabled")
      cy.get(tailDelete).should("be.enabled")
      cy.get(indexAdd).should("be.disabled")
      cy.get(indexDelete).should("be.disabled")
   })

   it("rendering", () => {

      cy.get(circle).should("have.length", 14)
      cy.get(circle).should(e => {
         expect(e.eq(1)).contain(arr[0])
         expect(e.eq(3)).contain(arr[1])
         expect(e.eq(5)).contain(arr[2])
         expect(e.eq(7)).contain(arr[3])
         expect(e.eq(9)).contain(arr[4])
         expect(e.eq(11)).contain(arr[5])
         expect(e.eq(13)).contain(arr[6])
      })
      cy.get(head).should(e => {
         expect(e.eq(1)).contain("head")
         expect(e.eq(3)).contain("")
         expect(e.eq(5)).contain("")
         expect(e.eq(7)).contain("")
         expect(e.eq(9)).contain("")
         expect(e.eq(11)).contain("")
         expect(e.eq(13)).contain("")
      })
      cy.get(tail).should(e => {
         expect(e.eq(1)).contain("")
         expect(e.eq(3)).contain("")
         expect(e.eq(5)).contain("")
         expect(e.eq(7)).contain("")
         expect(e.eq(9)).contain("")
         expect(e.eq(11)).contain("")
         expect(e.eq(13)).contain("tail")
      })
   })

   it("add head", () => {
      cy.clock()
      cy.get(inputValue).type("5").should("have.value", "5")
      cy.get(headAdd).click()
      cy.get(circle).should(e => {
         expect(e.eq(0)).contain("5").css(...changingColor)
         expect(e.eq(1)).contain(arr[0]).css(...defaultColor)
         expect(e.eq(3)).contain(arr[1]).css(...defaultColor)
         expect(e.eq(5)).contain(arr[2]).css(...defaultColor)
         expect(e.eq(7)).contain(arr[3]).css(...defaultColor)
         expect(e.eq(9)).contain(arr[4]).css(...defaultColor)
         expect(e.eq(11)).contain(arr[5]).css(...defaultColor)
         expect(e.eq(13)).contain(arr[6]).css(...defaultColor)
      })
      cy.tick(2000)
      cy.get(circle).should(e => {
         expect(e.eq(1)).contain("5").css(...modifiedColor)
         expect(e.eq(3)).contain(arr[0]).css(...defaultColor)
         expect(e.eq(5)).contain(arr[1]).css(...defaultColor)
         expect(e.eq(7)).contain(arr[2]).css(...defaultColor)
         expect(e.eq(9)).contain(arr[3]).css(...defaultColor)
         expect(e.eq(11)).contain(arr[4]).css(...defaultColor)
         expect(e.eq(13)).contain(arr[5]).css(...defaultColor)
         expect(e.eq(15)).contain(arr[6]).css(...defaultColor)
      })
      cy.get(head).should(e => {
         expect(e.eq(1)).contain("")
         expect(e.eq(3)).contain("")
         expect(e.eq(5)).contain("")
         expect(e.eq(7)).contain("")
         expect(e.eq(9)).contain("")
         expect(e.eq(11)).contain("")
         expect(e.eq(13)).contain("")
         expect(e.eq(15)).contain("")
      })
      cy.get(tail).should(e => {
         expect(e.eq(1)).contain("")
         expect(e.eq(3)).contain("")
         expect(e.eq(5)).contain("")
         expect(e.eq(7)).contain("")
         expect(e.eq(9)).contain("")
         expect(e.eq(11)).contain("")
         expect(e.eq(13)).contain("")
         expect(e.eq(15)).contain("tail")
      })
      cy.tick(2000)
      cy.get(circle).should(e => {
         expect(e.eq(1)).contain("5").css(...defaultColor)
         expect(e.eq(3)).contain(arr[0]).css(...defaultColor)
         expect(e.eq(5)).contain(arr[1]).css(...defaultColor)
         expect(e.eq(7)).contain(arr[2]).css(...defaultColor)
         expect(e.eq(9)).contain(arr[3]).css(...defaultColor)
         expect(e.eq(11)).contain(arr[4]).css(...defaultColor)
         expect(e.eq(13)).contain(arr[5]).css(...defaultColor)
         expect(e.eq(15)).contain(arr[6]).css(...defaultColor)
      })
   })

   it("add tail", () => {
      cy.clock()
      cy.get(inputValue).type("9").should("have.value", "9")
      cy.get(tailAdd).click()
      cy.get(circle).should(e => {
         expect(e.eq(1)).contain("5").css(...defaultColor)
         expect(e.eq(3)).contain(arr[0]).css(...defaultColor)
         expect(e.eq(5)).contain(arr[1]).css(...defaultColor)
         expect(e.eq(7)).contain(arr[2]).css(...defaultColor)
         expect(e.eq(9)).contain(arr[3]).css(...defaultColor)
         expect(e.eq(11)).contain(arr[4]).css(...defaultColor)
         expect(e.eq(13)).contain(arr[5]).css(...defaultColor)
         expect(e.eq(15)).contain(arr[6]).css(...defaultColor)
      })
      cy.tick(2000)
      cy.get(circle).should(e => {
         expect(e.eq(1)).contain("5").css(...defaultColor)
         expect(e.eq(3)).contain(arr[0]).css(...defaultColor)
         expect(e.eq(5)).contain(arr[1]).css(...defaultColor)
         expect(e.eq(7)).contain(arr[2]).css(...defaultColor)
         expect(e.eq(9)).contain(arr[3]).css(...defaultColor)
         expect(e.eq(11)).contain(arr[4]).css(...defaultColor)
         expect(e.eq(13)).contain(arr[5]).css(...defaultColor)
         expect(e.eq(15)).contain(arr[6]).css(...defaultColor)
         expect(e.eq(17)).contain("9").css(...modifiedColor)
      })
      cy.get(head).should(e => {
         expect(e.eq(1)).contain("head")
         expect(e.eq(3)).contain("")
         expect(e.eq(5)).contain("")
         expect(e.eq(7)).contain("")
         expect(e.eq(9)).contain("")
         expect(e.eq(11)).contain("")
         expect(e.eq(13)).contain("")
         expect(e.eq(15)).contain("")
      })
      cy.get(tail).should(e => {
         expect(e.eq(1)).contain("")
         expect(e.eq(3)).contain("")
         expect(e.eq(5)).contain("")
         expect(e.eq(7)).contain("")
         expect(e.eq(9)).contain("")
         expect(e.eq(11)).contain("")
         expect(e.eq(13)).contain("")
         expect(e.eq(15)).contain("")
         expect(e.eq(17)).contain("")
      })
      cy.tick(2000)
      cy.get(circle).should(e => {
         expect(e.eq(1)).contain("5").css(...defaultColor)
         expect(e.eq(3)).contain(arr[0]).css(...defaultColor)
         expect(e.eq(5)).contain(arr[1]).css(...defaultColor)
         expect(e.eq(7)).contain(arr[2]).css(...defaultColor)
         expect(e.eq(9)).contain(arr[3]).css(...defaultColor)
         expect(e.eq(11)).contain(arr[4]).css(...defaultColor)
         expect(e.eq(13)).contain(arr[5]).css(...defaultColor)
         expect(e.eq(15)).contain(arr[6]).css(...defaultColor)
         expect(e.eq(17)).contain("9").css(...defaultColor)
      })
   })

   it("add by index", () => {
      cy.clock()
      cy.get(inputValue).type("64").should("have.value", "64")
      cy.get(inputIndex).type("4").should("have.value", "4")
      cy.get(indexAdd).click()
      cy.tick(1000)
      cy.get(circle).should(e => {
         expect(e.eq(1)).contain("5").css(...defaultColor)
         expect(e.eq(3)).contain(arr[0]).css(...defaultColor)
         expect(e.eq(5)).contain(arr[1]).css(...defaultColor)
         expect(e.eq(7)).contain(arr[2]).css(...defaultColor)
         expect(e.eq(9)).contain(arr[3]).css(...defaultColor)
         expect(e.eq(11)).contain(arr[4]).css(...defaultColor)
         expect(e.eq(13)).contain(arr[5]).css(...defaultColor)
         expect(e.eq(15)).contain(arr[6]).css(...defaultColor)
         expect(e.eq(17)).contain("9").css(...defaultColor)
      })
      cy.tick(1000)
      cy.get(circle).should(e => {
         expect(e.eq(1)).contain("5").css(...changingColor)
         expect(e.eq(3)).contain(arr[0]).css(...defaultColor)
         expect(e.eq(5)).contain(arr[1]).css(...defaultColor)
         expect(e.eq(7)).contain(arr[2]).css(...defaultColor)
         expect(e.eq(9)).contain(arr[3]).css(...defaultColor)
         expect(e.eq(11)).contain(arr[4]).css(...defaultColor)
         expect(e.eq(13)).contain(arr[5]).css(...defaultColor)
         expect(e.eq(15)).contain(arr[6]).css(...defaultColor)
         expect(e.eq(17)).contain("9").css(...defaultColor)
      })
      cy.tick(1000)
      cy.get(circle).should(e => {
         expect(e.eq(1)).contain("5").css(...changingColor)
         expect(e.eq(3)).contain(arr[0]).css(...changingColor)
         expect(e.eq(5)).contain(arr[1]).css(...defaultColor)
         expect(e.eq(7)).contain(arr[2]).css(...defaultColor)
         expect(e.eq(9)).contain(arr[3]).css(...defaultColor)
         expect(e.eq(11)).contain(arr[4]).css(...defaultColor)
         expect(e.eq(13)).contain(arr[5]).css(...defaultColor)
         expect(e.eq(15)).contain(arr[6]).css(...defaultColor)
         expect(e.eq(17)).contain("9").css(...defaultColor)
      })
      cy.tick(1000)
      cy.get(circle).should(e => {
         expect(e.eq(1)).contain("5").css(...changingColor)
         expect(e.eq(3)).contain(arr[0]).css(...changingColor)
         expect(e.eq(5)).contain(arr[1]).css(...changingColor)
         expect(e.eq(7)).contain(arr[2]).css(...defaultColor)
         expect(e.eq(9)).contain(arr[3]).css(...defaultColor)
         expect(e.eq(11)).contain(arr[4]).css(...defaultColor)
         expect(e.eq(13)).contain(arr[5]).css(...defaultColor)
         expect(e.eq(15)).contain(arr[6]).css(...defaultColor)
         expect(e.eq(17)).contain("9").css(...defaultColor)
      })
      cy.tick(1000)
      cy.get(circle).should(e => {
         expect(e.eq(1)).contain("5").css(...changingColor)
         expect(e.eq(3)).contain(arr[0]).css(...changingColor)
         expect(e.eq(5)).contain(arr[1]).css(...changingColor)
         expect(e.eq(7)).contain(arr[2]).css(...changingColor)
         expect(e.eq(9)).contain(arr[3]).css(...defaultColor)
         expect(e.eq(11)).contain(arr[4]).css(...defaultColor)
         expect(e.eq(13)).contain(arr[5]).css(...defaultColor)
         expect(e.eq(15)).contain(arr[6]).css(...defaultColor)
         expect(e.eq(17)).contain("9").css(...defaultColor)
      })
      cy.tick(1000)
      cy.get(circle).should(e => {
         expect(e.eq(1)).contain("5").css(...changingColor)
         expect(e.eq(3)).contain(arr[0]).css(...changingColor)
         expect(e.eq(5)).contain(arr[1]).css(...changingColor)
         expect(e.eq(7)).contain(arr[2]).css(...changingColor)
         expect(e.eq(9)).contain("64").css(...modifiedColor)
         expect(e.eq(11)).contain(arr[3]).css(...defaultColor)
         expect(e.eq(13)).contain(arr[4]).css(...defaultColor)
         expect(e.eq(15)).contain(arr[5]).css(...defaultColor)
         expect(e.eq(17)).contain(arr[6]).css(...defaultColor)
         expect(e.eq(19)).contain("9").css(...defaultColor)
      })
      cy.tick(1000)
      cy.get(circle).should(e => {
         expect(e.eq(1)).contain("5").css(...defaultColor)
         expect(e.eq(3)).contain(arr[0]).css(...defaultColor)
         expect(e.eq(5)).contain(arr[1]).css(...defaultColor)
         expect(e.eq(7)).contain(arr[2]).css(...defaultColor)
         expect(e.eq(9)).contain("64").css(...defaultColor)
         expect(e.eq(11)).contain(arr[3]).css(...defaultColor)
         expect(e.eq(13)).contain(arr[4]).css(...defaultColor)
         expect(e.eq(15)).contain(arr[5]).css(...defaultColor)
         expect(e.eq(17)).contain(arr[6]).css(...defaultColor)
         expect(e.eq(19)).contain("9").css(...defaultColor)
      })
   })

   it("del head", () => {
      cy.clock()
      cy.get(headDelete).click()
      cy.get(circle).should(e => {
         expect(e.eq(0)).contain("5").css(...changingColor)
         expect(e.eq(1)).contain("").css(...defaultColor)
         expect(e.eq(3)).contain(arr[0]).css(...defaultColor)
         expect(e.eq(5)).contain(arr[1]).css(...defaultColor)
         expect(e.eq(7)).contain(arr[2]).css(...defaultColor)
         expect(e.eq(9)).contain("64").css(...defaultColor)
         expect(e.eq(11)).contain(arr[3]).css(...defaultColor)
         expect(e.eq(13)).contain(arr[4]).css(...defaultColor)
         expect(e.eq(15)).contain(arr[5]).css(...defaultColor)
         expect(e.eq(17)).contain(arr[6]).css(...defaultColor)
         expect(e.eq(19)).contain("9").css(...defaultColor)
      })
      cy.tick(2000)
      cy.get(circle).should(e => {
         expect(e.eq(1)).contain(arr[0]).css(...defaultColor)
         expect(e.eq(3)).contain(arr[1]).css(...defaultColor)
         expect(e.eq(5)).contain(arr[2]).css(...defaultColor)
         expect(e.eq(7)).contain("64").css(...defaultColor)
         expect(e.eq(9)).contain(arr[3]).css(...defaultColor)
         expect(e.eq(11)).contain(arr[4]).css(...defaultColor)
         expect(e.eq(13)).contain(arr[5]).css(...defaultColor)
         expect(e.eq(15)).contain(arr[6]).css(...defaultColor)
         expect(e.eq(17)).contain("9").css(...defaultColor)
      })
   })

   it("del tail", () => {
      cy.clock()
      cy.get(tailDelete).click()
      cy.get(circle).should(e => {
         expect(e.eq(1)).contain(arr[0]).css(...defaultColor)
         expect(e.eq(3)).contain(arr[1]).css(...defaultColor)
         expect(e.eq(5)).contain(arr[2]).css(...defaultColor)
         expect(e.eq(7)).contain("64").css(...defaultColor)
         expect(e.eq(9)).contain(arr[3]).css(...defaultColor)
         expect(e.eq(11)).contain(arr[4]).css(...defaultColor)
         expect(e.eq(13)).contain(arr[5]).css(...defaultColor)
         expect(e.eq(15)).contain(arr[6]).css(...defaultColor)
         expect(e.eq(16)).contain("9").css(...changingColor)
         expect(e.eq(17)).contain("").css(...defaultColor)
      })
      cy.tick(2000)
      cy.get(circle).should(e => {
         expect(e.eq(1)).contain(arr[0]).css(...defaultColor)
         expect(e.eq(3)).contain(arr[1]).css(...defaultColor)
         expect(e.eq(5)).contain(arr[2]).css(...defaultColor)
         expect(e.eq(7)).contain("64").css(...defaultColor)
         expect(e.eq(9)).contain(arr[3]).css(...defaultColor)
         expect(e.eq(11)).contain(arr[4]).css(...defaultColor)
         expect(e.eq(13)).contain(arr[5]).css(...defaultColor)
         expect(e.eq(15)).contain(arr[6]).css(...defaultColor)
      })
   })

   it("del by index", () => {
      cy.clock()
      cy.get(inputIndex).type("3").should("have.value", "3")
      cy.get(indexDelete).click()
      cy.tick(1000)
      cy.get(circle).should(e => {
         expect(e.eq(1)).contain(arr[0]).css(...defaultColor)
         expect(e.eq(3)).contain(arr[1]).css(...defaultColor)
         expect(e.eq(5)).contain(arr[2]).css(...defaultColor)
         expect(e.eq(7)).contain("64").css(...defaultColor)
         expect(e.eq(9)).contain(arr[3]).css(...defaultColor)
         expect(e.eq(11)).contain(arr[4]).css(...defaultColor)
         expect(e.eq(13)).contain(arr[5]).css(...defaultColor)
         expect(e.eq(15)).contain(arr[6]).css(...defaultColor)
      })
      cy.tick(1000)
      cy.get(circle).should(e => {
         expect(e.eq(1)).contain(arr[0]).css(...changingColor)
         expect(e.eq(3)).contain(arr[1]).css(...defaultColor)
         expect(e.eq(5)).contain(arr[2]).css(...defaultColor)
         expect(e.eq(7)).contain("64").css(...defaultColor)
         expect(e.eq(9)).contain(arr[3]).css(...defaultColor)
         expect(e.eq(11)).contain(arr[4]).css(...defaultColor)
         expect(e.eq(13)).contain(arr[5]).css(...defaultColor)
         expect(e.eq(15)).contain(arr[6]).css(...defaultColor)
      })
      cy.tick(1000)
      cy.get(circle).should(e => {
         expect(e.eq(1)).contain(arr[0]).css(...changingColor)
         expect(e.eq(3)).contain(arr[1]).css(...changingColor)
         expect(e.eq(5)).contain(arr[2]).css(...defaultColor)
         expect(e.eq(7)).contain("64").css(...defaultColor)
         expect(e.eq(9)).contain(arr[3]).css(...defaultColor)
         expect(e.eq(11)).contain(arr[4]).css(...defaultColor)
         expect(e.eq(13)).contain(arr[5]).css(...defaultColor)
         expect(e.eq(15)).contain(arr[6]).css(...defaultColor)
      })
      cy.tick(1000)
      cy.get(circle).should(e => {
         expect(e.eq(1)).contain(arr[0]).css(...changingColor)
         expect(e.eq(3)).contain(arr[1]).css(...changingColor)
         expect(e.eq(5)).contain(arr[2]).css(...changingColor)
         expect(e.eq(7)).contain("64").css(...defaultColor)
         expect(e.eq(9)).contain(arr[3]).css(...defaultColor)
         expect(e.eq(11)).contain(arr[4]).css(...defaultColor)
         expect(e.eq(13)).contain(arr[5]).css(...defaultColor)
         expect(e.eq(15)).contain(arr[6]).css(...defaultColor)
      })
      cy.tick(1000)
      cy.get(circle).should(e => {
         expect(e.eq(1)).contain(arr[0]).css(...changingColor)
         expect(e.eq(3)).contain(arr[1]).css(...changingColor)
         expect(e.eq(5)).contain(arr[2]).css(...changingColor)
         expect(e.eq(6)).contain("64").css(...changingColor)
         expect(e.eq(7)).contain("").css(...defaultColor)
         expect(e.eq(9)).contain(arr[3]).css(...defaultColor)
         expect(e.eq(11)).contain(arr[4]).css(...defaultColor)
         expect(e.eq(13)).contain(arr[5]).css(...defaultColor)
         expect(e.eq(15)).contain(arr[6]).css(...defaultColor)
      })
      cy.tick(1000)

      cy.get(circle).should(e => {
         expect(e.eq(1)).contain(arr[0]).css(...changingColor)
         expect(e.eq(3)).contain(arr[1]).css(...changingColor)
         expect(e.eq(5)).contain(arr[2]).css(...changingColor)
         expect(e.eq(9)).contain(arr[3]).css(...defaultColor)
         expect(e.eq(11)).contain(arr[4]).css(...defaultColor)
         expect(e.eq(13)).contain(arr[5]).css(...defaultColor)
         expect(e.eq(15)).contain(arr[6]).css(...defaultColor)
      })
   })

})
